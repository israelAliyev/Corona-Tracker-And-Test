{"ast":null,"code":"const Joi = require('@hapi/joi');\n\nconst express = require('express'),\n      mysql = require('mysql'),\n      bodyParser = require('body-parser'),\n      cors = require('cors'),\n      bcrypt = require('bcrypt'),\n      saltRounds = 10,\n      cookieParser = require('cookie-parser'),\n      session = require('express-session'),\n      app = express();\n\nrequire('dotenv').config();\n\napp.use(cookieParser());\napp.use(express.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(cors({\n  origin: ['lo'],\n  methods: ['POST', 'GET'],\n  credentials: true\n}));\napp.use(session({\n  key: 'user',\n  secret: 'subscriber',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    expires: 60 * 60 * 24 * 360 * 360 * 360\n  }\n}));\nconst db = mysql.createConnection({\n  user: 'bc9e44c6e81b5e',\n  password: 'f776ab41',\n  host: 'eu-cdbr-west-03.cleardb.net',\n  database: 'heroku_3bb94949cd3ef16'\n});\napp.post('/register', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  const mail = req.body.mail;\n  const image = req.body.image;\n  bcrypt.hash(password, saltRounds, (err, hash) => {\n    db.query('INSERT INTO users (user_name , user_mail , user_password , user_image ,admin_id) values(?,?,?,?,?)', [username, mail, hash, image, 1]);\n  });\n});\napp.get('/login', (request, response) => {\n  if (request.session.user) {\n    response.send({\n      loggedIn: true,\n      user: request.session.user\n    });\n  } else {\n    response.send({\n      loggedIn: false\n    });\n  }\n});\napp.post('/logout', (request, response) => {\n  request.session.destroy();\n});\napp.post('/usemail', (request, response) => {\n  const mail = request.body.mail;\n  db.query('select * from users where user_mail = ?;', [mail], (err, result) => {\n    if (result.length > 0) {\n      response.send({\n        exist: true\n      });\n    } else {\n      response.send({\n        exist: false\n      });\n    }\n  });\n});\napp.post('/login', (request, response) => {\n  const email = request.body.mail;\n  const password = request.body.password;\n  db.query('select * from users where user_mail = ?;', [email], (err, result) => {\n    if (err) {\n      response.send({\n        err: err\n      });\n    }\n\n    if (result.length > 0) {\n      bcrypt.compare(password, result[0].user_password, (hashErr, hashRes) => {\n        if (hashRes) {\n          request.session.user = result;\n          response.send(result);\n        } else {\n          response.send({\n            message: \"E-post address or Password is false!\"\n          });\n        }\n      });\n    } else {\n      response.send({\n        message: \"User doesn't exist!\"\n      });\n    }\n  });\n});\nconst port = process.env.PORT || 4000;\napp.listen(port, () => {\n  console.log(\"Salam Aleykum\");\n});","map":{"version":3,"sources":["/Users/israil/WebstormProjects/Metbix/client/src/LoginAndRegister/Register.js"],"names":["Joi","require","express","mysql","bodyParser","cors","bcrypt","saltRounds","cookieParser","session","app","config","use","json","urlencoded","extended","origin","methods","credentials","key","secret","resave","saveUninitialized","cookie","expires","db","createConnection","user","password","host","database","post","req","res","username","body","mail","image","hash","err","query","get","request","response","send","loggedIn","destroy","result","length","exist","email","compare","user_password","hashErr","hashRes","message","port","process","env","PORT","listen","console","log"],"mappings":"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","sourcesContent":["\nconst Joi = require('@hapi/joi');\n\nconst express = require('express'),\n    mysql = require('mysql'),\n    bodyParser = require('body-parser'),\n    cors = require('cors'),\n    bcrypt = require('bcrypt'),\n    saltRounds = 10,\n    cookieParser = require('cookie-parser'),\n    session = require('express-session'),\n    app = express();\nrequire('dotenv').config();\n\napp.use(cookieParser());\napp.use(express.json());\napp.use(bodyParser.urlencoded({extended: true}));\n\n\n\napp.use(cors({\n    origin: ['lo'],\n    methods: ['POST', 'GET'],\n    credentials: true\n}));\n\n\napp.use(session({\n    key: 'user',\n    secret: 'subscriber',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n        expires: 60 * 60 * 24 * 360 * 360 * 360,\n    },\n\n}));\n\n\nconst db = mysql.createConnection(\n    {\n        user: 'bc9e44c6e81b5e',\n        password: 'f776ab41',\n        host: 'eu-cdbr-west-03.cleardb.net',\n        database: 'heroku_3bb94949cd3ef16'\n    }\n);\n\n\napp.post('/register', (req, res) => {\n\n    const username = req.body.username;\n    const password = req.body.password;\n    const mail = req.body.mail;\n    const image = req.body.image;\n\n    bcrypt.hash(password, saltRounds, (err, hash) => {\n\n        db.query('INSERT INTO users (user_name , user_mail , user_password , user_image ,admin_id) values(?,?,?,?,?)', [username, mail, hash, image ,1]);\n\n    });\n\n});\n\n\napp.get('/login', (request, response) => {\n\n\n    if (request.session.user) {\n\n        response.send({loggedIn: true , user:request.session.user})\n\n    } else {\n\n        response.send({loggedIn: false})\n\n\n    }\n\n\n})\n\n\n\n\napp.post('/logout' , (request , response) => {\n\n    request.session.destroy();\n\n})\n\n\n\napp.post('/usemail' , (request , response) => {\n\n    const mail = request.body.mail\n\n    db.query('select * from users where user_mail = ?;',[mail] , (err , result) => {\n\n        if (result.length > 0){\n\n            response.send({exist : true})\n\n        }else {\n\n            response.send({exist : false})\n\n        }\n\n    });\n\n})\n\n\napp.post('/login', (request, response) => {\n\n    const email = request.body.mail\n    const password = request.body.password\n    db.query('select * from users where user_mail = ?;', [email],\n        (err, result) => {\n\n            if (err) {\n\n                response.send({err: err});\n\n            }\n\n            if (result.length > 0) {\n\n                bcrypt.compare(password, result[0].user_password, (hashErr, hashRes) => {\n\n                    if (hashRes) {\n\n                        request.session.user = result;\n\n                        response.send(result)\n\n\n                    } else {\n\n                        response.send({message: \"E-post address or Password is false!\"})\n\n                    }\n\n\n                });\n\n\n            } else {\n\n\n                response.send({message: \"User doesn't exist!\"})\n            }\n\n        });\n\n});\n\nconst port = process.env.PORT || 4000;\n\n\napp.listen(port, ()=> {(console.log(\"Salam Aleykum\"))});\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}