{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"/Users/israil/WebstormProjects/Metbix/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/israil/WebstormProjects/Metbix/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/israil/WebstormProjects/Metbix/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Line}from\"react-chartjs-2\";import numeral from\"numeral\";var options={legend:{display:false},elements:{point:{radius:0}},maintainAspectRatio:false,tooltips:{mode:\"index\",intersect:false,callbacks:{label:function label(tooltipItem,data){return numeral(tooltipItem.value).format(\"+0,0\");}}},scales:{xAxes:[{type:\"time\",time:{format:\"MM/DD/YY\",tooltipFormat:\"ll\"}}],yAxes:[{gridLines:{display:false},ticks:{callback:function callback(value,index,values){return numeral(value).format(\"0a\");}}}]}};var buildChartData=function buildChartData(data){var casesType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"cases\";var chartData=[];var lastDataPoint;for(var date in data.cases){if(lastDataPoint){var newDataPoint={x:date,y:data[casesType][date]-lastDataPoint};chartData.push(newDataPoint);}lastDataPoint=data[casesType][date];}return chartData;};var LineGraph=function LineGraph(_ref){var casesType=_ref.casesType;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\").then(function(response){return response.json();}).then(function(data){var chartData=buildChartData(data,casesType);setData(chartData);console.log(chartData);// buildChart(chartData);\n});case 2:case\"end\":return _context.stop();}}},_callee);}));return function fetchData(){return _ref2.apply(this,arguments);};}();fetchData();},[casesType]);return/*#__PURE__*/_jsx(\"div\",{children:(data===null||data===void 0?void 0:data.length)>0&&/*#__PURE__*/_jsx(Line,{data:casesType===\"cases\"?{datasets:[{backgroundColor:\"rgb(239,220,169)\",borderColor:\"#f6d07c\",data:data}]}:casesType===\"recovered\"?{datasets:[{backgroundColor:\"rgb(146,238,120)\",borderColor:\"#7cd45d\",data:data}]}:{datasets:[{backgroundColor:\"rgb(241,149,153)\",borderColor:\"#f66666\",data:data}]},options:options})});};export default LineGraph;","map":{"version":3,"sources":["/Users/israil/WebstormProjects/Metbix/client/src/Map/LineGraph.js"],"names":["React","useEffect","useState","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","LineGraph","setData","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React ,{useEffect , useState} from \"react\";\nimport {Line} from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n};\n\n\n\nconst buildChartData = (data, casesType = \"cases\") => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\n\n const LineGraph = ({casesType}) => {\n\n\n\n\n     const [data, setData] = useState({});\n\n     useEffect(() => {\n         const fetchData = async () => {\n             await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\n                 .then((response) => {\n                     return response.json();\n                 })\n                 .then((data) => {\n                     let chartData = buildChartData(data, casesType);\n                     setData(chartData);\n                     console.log(chartData);\n                     // buildChart(chartData);\n                 });\n         };\n\n         fetchData();\n     }, [casesType]);\n\n\n     return(\n\n         <div>\n             {data?.length > 0 && (\n                 <Line\n                     data={casesType === \"cases\" ? {\n                         datasets: [\n                             {\n\n                                 backgroundColor: \"rgb(239,220,169)\",\n                                 borderColor: \"#f6d07c\",\n                                 data: data,\n                             },\n                         ],\n                     } : casesType === \"recovered\" ? {\n                         datasets: [\n                             {\n\n                                 backgroundColor: \"rgb(146,238,120)\",\n                                 borderColor: \"#7cd45d\",\n                                 data: data,\n                             },\n                         ],\n                     } :  {\n                         datasets: [\n                             {\n\n                                 backgroundColor: \"rgb(241,149,153)\",\n                                 borderColor: \"#f66666\",\n                                 data: data,\n                             },\n                         ],\n                     }}\n                     options={options}\n                 />\n             )}\n         </div>\n\n     );\n}\n\nexport default LineGraph;"]},"metadata":{},"sourceType":"module"}