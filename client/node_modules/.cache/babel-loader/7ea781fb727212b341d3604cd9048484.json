{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/israil/WebstormProjects/Metbix/client/src/LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nconst LineGraph = ({\n  casesType\n}) => {\n  _s();\n\n  const [colorN, setColorN] = useState(\"green\");\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\").then(response => {\n        return response.json();\n      }).then(data => {\n        let chartData = buildChartData(data, casesType);\n        setData(chartData);\n        console.log(chartData); // buildChart(chartData);\n      });\n    };\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      data: colorN === \"green\" ? {\n        datasets: [{\n          backgroundColor: \"rgb(245,187,114)\",\n          borderColor: \"green\",\n          data: data\n        }]\n      } : null,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 10\n  }, this);\n};\n\n_s(LineGraph, \"2PVGBd7ZiAjbsrIUii+J16RpFzA=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/Users/israil/WebstormProjects/Metbix/client/src/LineGraph.js"],"names":["React","useEffect","useState","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","LineGraph","colorN","setColorN","setData","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React ,{useEffect , useState} from \"react\";\nimport {Line} from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n};\n\n\n\nconst buildChartData = (data, casesType = \"cases\") => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\n\n const LineGraph = ({casesType}) => {\n\n     const[colorN , setColorN] = useState(\"green\");\n\n\n\n     const [data, setData] = useState({});\n\n     useEffect(() => {\n         const fetchData = async () => {\n             await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\n                 .then((response) => {\n                     return response.json();\n                 })\n                 .then((data) => {\n                     let chartData = buildChartData(data, casesType);\n                     setData(chartData);\n                     console.log(chartData);\n                     // buildChart(chartData);\n                 });\n         };\n\n         fetchData();\n     }, [casesType]);\n\n\n     return(\n\n         <div>\n             {data?.length > 0 && (\n                 <Line\n                     data={colorN === \"green\" ? {\n                         datasets: [\n                             {\n\n                                 backgroundColor: \"rgb(245,187,114)\",\n                                 borderColor: \"green\",\n                                 data: data,\n                             },\n                         ],\n                     } : null}\n                     options={options}\n                 />\n             )}\n         </div>\n\n     );\n}\n\nexport default LineGraph;"]},"metadata":{},"sourceType":"module"}